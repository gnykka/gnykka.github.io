{"mappings":"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","sources":["src/scripts/memory.js"],"sourcesContent":["const Memo = function(selector) {\n\n    // Начальные данные\n\n    const ASSETS_PATH = './games/';\n\n    const cardSize = 60;\n    const cardMargin = 6;\n    const cardSource = [\n        { id: 1, img: '1' },\n        { id: 2, img: '2' },\n        { id: 3, img: '3' },\n        { id: 4, img: '4' },\n        { id: 5, img: '5' },\n        { id: 6, img: '6' },\n        { id: 7, img: '7' },\n        { id: 8, img: '8' },\n        { id: 9, img: '9' },\n        { id: 10, img: '10' },\n        { id: 11, img: '11' },\n        { id: 12, img: '12' },\n        { id: 13, img: '13' },\n        { id: 14, img: '14' },\n        { id: 15, img: '15' },\n        { id: 16, img: '16' },\n        { id: 17, img: '17' },\n        { id: 18, img: '18' },\n        { id: 19, img: '19' },\n        { id: 20, img: '20' },\n    ];\n    let score = 0;\n    let interactive = true;\n    let cardsArray = [];\n    let answers = [];\n    let answerCounter = 0;\n\n    // Инициализация PIXI\n\n    const gameContainer = document.querySelector(selector);\n    const app = new PIXI.Application({\n        backgroundColor: 0xffffff,\n        width: 375,\n        height: 667,\n        antialias: true,\n        resolution: 3,\n        autoDensity: true,\n    });\n    gameContainer.appendChild(app.view);\n\n    app.renderer.plugins.interaction.autoPreventDefault = false;\n    app.renderer.view.style.touchAction = 'auto';\n\n\n    // Создание контейнера сетки карточек\n\n    let grid = new PIXI.Container();\n    grid.x = 27;\n    grid.y = 90;\n    app.stage.addChild(grid);\n\n    // Создание контейнера счета\n\n    let scoreWrap = new PIXI.Container();\n    let scoreText = new PIXI.Text('SCORE');\n    let scoreValue = new PIXI.Text(score);\n    app.stage.addChild(scoreWrap);\n    scoreWrap.addChild(scoreText);\n    scoreWrap.addChild(scoreValue);\n\n    // Создание финального экрана с кнопкой рестарта\n\n    let winScreen = new PIXI.Container();\n    winScreen.width = 375;\n    winScreen.height = 667;\n    winScreen.alpha = 0;\n    let winScreenImg = new PIXI.Sprite.from(`${ASSETS_PATH}win-screen.png`);\n    winScreenImg.width = 375;\n    winScreenImg.height = 667;\n    let screenBtn = new PIXI.Sprite.from(`${ASSETS_PATH}restart-btn.png`);\n\n    screenBtn.width = 82;\n    screenBtn.height = 82;\n    screenBtn.x = 147;\n    screenBtn.y = 525;\n    app.stage.addChild(winScreen);\n    winScreen.addChild(winScreenImg);\n    winScreen.addChild(screenBtn);\n\n    screenBtn.buttonMode = true;\n    screenBtn.on('pointerdown', () => {\n        init();\n        fadeOut(winScreen);\n    });\n\n    // Инициализация(рестар) игры\n\n    function init() {\n        generationCards();\n        drawGrid(cardsArray, 5);\n        drawScore();\n        interactive = true;\n        answers = [];\n        answerCounter = 0;\n        score = 0;\n        winScreen.interactive = false;\n        screenBtn.interactive = false;\n    }\n    init();\n\n\n    // Отрисовка счета\n\n    function drawScore() {\n        scoreValue.style.fill = 0x242424;\n        scoreValue.style.fontSize = 40;\n        scoreValue.style.fontFamily = 'DisposableDroid BB';\n        scoreValue.text = `000`;\n        scoreValue.y = 6;\n        scoreValue.x = 315;\n        scoreText.style.fill = 0x242424;\n        scoreText.style.fontSize = 40;\n        scoreText.style.fontFamily = 'DisposableDroid BB';\n        scoreText.y = 6;\n        scoreText.x = 10;\n        scoreText.style.textTransform = 'uppercase';\n    }\n\n    // Создание коллекции карточек и загрузка в сетку\n\n    function generationCards() {\n        grid.children = [];\n        cardsArray = [];\n        let array1 = shuffleCards([...cardSource]);\n        let array2 = shuffleCards([...cardSource]);\n        let resultArray = array1.concat(array2);\n        resultArray.forEach((element, index) => {\n            let item = new PIXI.Container();\n            item.interactive = true;\n            item.buttonMode = true;\n            item.id = element.id;\n            item.answerId = null;\n            item.option = {\n                selected: false,\n                bgTexture: new PIXI.Texture.from(`${ASSETS_PATH}memo/bg.svg`),\n                bgTextureHover: new PIXI.Texture.from(`${ASSETS_PATH}memo/bg-hover.svg`),\n                imgTexture: new PIXI.Texture.from(\n                    `${ASSETS_PATH}memo/${element.img}.png`\n                ),\n                imgTextureHover: new PIXI.Texture.from(\n                    `${ASSETS_PATH}memo/${element.img}-hover.png`\n                ),\n            };\n            let bg = new PIXI.Sprite.from(item.option.bgTexture);\n            let img = new PIXI.Sprite.from(item.option.imgTexture);\n            img.x = 10;\n            img.y = 10;\n            img.width = 40;\n            img.height = 40;\n            item.addChild(bg);\n            item.addChild(img);\n            grid.addChild(item);\n            cardsArray.push(item);\n            item.on('pointerdown', () => {\n                selectCard(item, index);\n            });\n        });\n\n    }\n\n    // Перемешивание карточек\n\n    function shuffleCards(array) {\n        let counter = array.length,\n            temp,\n            index;\n        while (counter > 0) {\n            index = Math.floor(Math.random() * counter);\n            counter--;\n            temp = array[counter];\n            array[counter] = array[index];\n            array[index] = temp;\n        }\n        return array;\n    }\n\n    // Отрисовка сетки \n\n    function drawGrid(arr, col) {\n        let len = arr.length;\n        let box;\n        for (let j = 0; j < len; j++) {\n            box = arr[j];\n            box.x = (j % col) * (cardSize + cardMargin);\n            box.y = parseInt(j / col) * (cardSize + cardMargin);\n        }\n    }\n\n    // Выбор карты\n\n    function selectCard(item, index) {\n        if (interactive) {\n            if (!item.option.selected) {\n                item.getChildAt(0).texture = item.option.bgTextureHover;\n                item.getChildAt(1).texture = item.option.imgTextureHover;\n                item.answerId = answerCounter;\n                answers[item.answerId] = item;\n                answerCounter += 1;\n            } else {\n                item.getChildAt(0).texture = item.option.bgTexture;\n                item.getChildAt(1).texture = item.option.imgTexture;\n                answers.splice(item.answerId, 1);\n                item.answerId = null;\n                answerCounter -= 1;\n            }\n            item.option.selected = !item.option.selected;\n            if (answerCounter >= 2) {\n                comparison();\n            }\n\n        }\n    }\n\n    // Сравнение выбранных карт\n\n    function comparison() {\n        interactive = false;\n        setTimeout(() => {\n            if (answers.length > 0 && answers[0].id === answers[1].id) {\n                answers.forEach((item) => {\n                    item.interactive = false;\n                    item.buttonMode = false;\n                    item.answerId = null;\n                    item.option.selected = false;\n                    fadeOut(item);\n                });\n\n                updateScore();\n            } else {\n                setTimeout(() => {\n                    answers.forEach((item) => {\n                        item.getChildAt(0).texture = item.option.bgTexture;\n                        item.getChildAt(1).texture = item.option.imgTexture;\n                        item.answerId = null;\n                        item.option.selected = false;\n                    });\n                }, 200);\n            }\n            setTimeout(() => {\n                answers = [];\n                answerCounter = 0;\n                interactive = true;\n            }, 200);\n        }, 200);\n    }\n\n    // Обновление счета\n\n    function updateScore() {\n        score += 1;\n        let displayScore;\n        if (score >= 10) {\n            displayScore = `0${score}`;\n        } else {\n            displayScore = `00${score}`;\n        }\n        scoreValue.text = displayScore;\n        if (score === cardSource.length) {\n            gameWin();\n        }\n    }\n\n    // Игра пройдена\n\n    function gameWin() {\n        interactive = false;\n        fadeIn(winScreen);\n        winScreen.interactive = true;\n        screenBtn.interactive = true;\n\n\n    }\n\n    // Анимационные эффекты\n\n    function fadeOut(item) {\n        item.alpha = 1;\n\n        function animationUpdate(delta) {\n            item.alpha -= 0.15 * delta;\n            if (item.alpha <= 0) {\n                app.ticker.remove(animationUpdate);\n            }\n        }\n        app.ticker.add(animationUpdate);\n    }\n\n    function fadeIn(item) {\n        item.alpha = 0;\n\n        function animationUpdate(delta) {\n            item.alpha += 0.15 * delta;\n            if (item.alpha >= 1) {\n                app.ticker.remove(animationUpdate);\n            }\n        }\n        app.ticker.add(animationUpdate);\n    }\n\n};\n"],"names":["Memo","selector","cardSource","id","img","score","interactive","cardsArray","answers","answerCounter","gameContainer","document","querySelector","app","PIXI","Application","backgroundColor","width","height","antialias","resolution","autoDensity","appendChild","view","renderer","plugins","interaction","autoPreventDefault","style","touchAction","grid","Container","x","y","stage","addChild","scoreWrap","scoreText","Text","scoreValue","winScreen","alpha","winScreenImg","Sprite","from","screenBtn","init","children","array1","shuffleCards","array2","concat","forEach","element","index","item","buttonMode","answerId","option","selected","bgTexture","Texture","bgTextureHover","imgTexture","imgTextureHover","bg","push","on","getChildAt","texture","splice","setTimeout","length","fadeOut","displayScore","text","animationUpdate","delta","ticker","remove","add","fadeIn","updateScore","selectCard","generationCards","arr","col","box","len","j","parseInt","drawGrid","fill","fontSize","fontFamily","textTransform","array","temp","counter","Math","floor","random"],"version":3,"file":"recommendations.fedd3f94.js.map"}